#!/usr/bin/env python3

"""
This module facilitates the creating image histogram data.

    Typical Usage:

    my_histogram = Hist(clusters, 5, "720")
"""

import cv2
import logging
import numpy as np

from colorkeys.centroids import Clust

logger = logging.getLogger(__name__)


class Hist(Clust):
    """A class for generating histogram and histogram bar information based on
    input clusters/centroids. In other words, this generates the color palette
    bar.

    Attributes:
        num_clusters (int): Number of clusters/centroids requested.
        hist (numpy.ndarray): Normalized histogram of centroids.
        hist_bar (numpy.ndarray): Normalized histogram bar scaled to image width.
        hist_bar_height (int): histogram bar height.
    """
    def __init__(self, img, algo, num_clusters, img_width):
        super().__init__(img, algo, num_clusters)
        """Init Hist.

        Args:
            num_clusters (int): Number of clusters/centroids requested.
            img_width (int): Width of image used for cluster generation (used
                to define width for histogram bar).
        """
        self._hist_bar_height = 60
        self._hist = self._get_hist()
        self._hist_bar = self._get_hist_bar(img_width)

#    @property
#    def num_clusters(self):
#        return self._num_clusters

    @property
    def hist(self):
        "Get histogram"
        return self._hist

    @property
    def hist_bar(self):
        "Get histogram bar"
        return self._hist_bar

    @property
    def hist_bar_height(self):
        "Get histogram bar"
        return self._hist_bar_height

    def _get_hist(self):
        """Get histogram from generated cluster.

        The sklearn.cluster is an array of labels. The clustering algorithm assigns
        a cluster label to each point. A histogram is generated by separating
        these labels into bins. The resulting histogram is then normalised to 1.

        Args:
            None

        Returns:
            hist (numpy.ndarray): Normalized histogram.
        """
        num_labels = np.arange(0, len(np.unique(self.clust.labels_)) + 1)
        (hist, _) = np.histogram(self.clust.labels_, bins=num_labels)
        hist = hist.astype("float")
        hist /= hist.sum()
        return hist

    def _get_hist_bar(self, img_width):
        """Get histogram bar from histogram.

        Generate a histogram bar using centroids. The sklearn.cluster generated
        centroids (cluster centers) are coordinates in the image. Use the color
        at each centroid to generate a bar based on relative percentage (scaled
        by image width) that the centroid occupies in the normalised histogram.

        Args:
            img_width (int): Width of image used to generate cluster.

        Returns:
            hist_bar (numpy.ndarray): Histogram bar.
        """
        num_channels = 3
        hist_bar = np.zeros(
            (self._hist_bar_height, img_width, num_channels),
            dtype = "uint8",
        )

        # build the bar each centroid/color at a time.
        start_x = 0
        for (percent, color) in zip(self._hist, self.clust.cluster_centers_):
            end_x = start_x + (percent * img_width)
            cv2.rectangle(
                hist_bar,
                (int(start_x), 0),
                (int(end_x), self._hist_bar_height),
                color.astype("uint8").tolist(),
                -1,
            )
            start_x = end_x
        return hist_bar
